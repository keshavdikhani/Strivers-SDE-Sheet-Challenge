class Solution {
public:
    int uniquePaths(int m, int n) {
        int k=m+n-2;

        int r=min(m-1,n-1);

        double res=1;

        for(int i=1;i<=r;i++){
            res=res*(k)/i ;
            k--;
        }
        return (int)res;
    }
};






the above code is more optimal 
/*
int count(int i,int j,int n,int m,vector<vector<int>> &dp){
    if((i==n-1)&&(j==m-1))return 1;
    if((i>=n)||(j>=m))return 0;

    if(dp[i][j] != -1)return dp[i][j];
    else return dp[i][j]=count(i+1,j,n,m,dp)+count(i,j+1,n,m,dp);


}


class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp;
        for(int i=0;i<m;i++){
            vector<int> v;
            for(int j=0;j<n;j++){
                v.push_back(-1);
            }
            dp.push_back(v);
        }

        return count(0,0,m,n,dp);
        return 1;
    }
};
*/